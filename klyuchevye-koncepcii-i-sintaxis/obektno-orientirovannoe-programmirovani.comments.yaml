jOiFy:
  comment:
    user:
      mail: alexbbtsk@gmail.com
      name: ALhoc27
    dateTime: '2024-10-22T10:59:50.756Z'
    content: >-
      Все что касается наследования могут спросить на собеседовании, но в
      практике этого использовать не надо.


      Да и если спрашивают про наследование, я бы задумался, стоит ли идти в
      компанию, где продолжают использовать этот механизм для расширения кода.


      Далее в разделе «Полиморфизм» будет наглядно показано, каким образом можно
      сделать код гибким без использования наследования.
  answers: []
5FmDX:
  comment:
    user:
      mail: alexbbtsk@gmail.com
      name: ALhoc27
    dateTime: '2024-10-22T11:04:31.901Z'
    content: |-
      # Когда происходит инициализация полей\*\*?\*\*

      -  **Статические поля** -- инициализируются при **загрузке класса**.

      -  **Поля экземпляра** -- инициализируются **при создании объекта**.
  answers: []
RTSKW:
  comment:
    user:
      mail: alexbbtsk@gmail.com
      name: ALhoc27
    dateTime: '2024-10-22T11:04:47.672Z'
    content: |-
      # Когда происходит инициализация полей?

      -  **Статические поля** -- инициализируются при **загрузке класса**.

      -  **Поля экземпляра** -- инициализируются **при создании объекта**.
  answers: []
LED6m:
  comment:
    user:
      mail: alexbbtsk@gmail.com
      name: ALhoc27
    dateTime: '2024-10-22T16:22:01.088Z'
    content: '# по умолчанию, без модификатора'
  answers: []
KfLSs:
  comment:
    user:
      mail: alexbbtsk@gmail.com
      name: ALhoc27
    dateTime: '2024-10-22T16:22:17.409Z'
    content: >-
      # Цель конструктора в абстрактном класс**е**


      -  **Абстрактный класс не может быть инстанцирован** напрямую, но он может
      содержать конструктор.


      -  Конструктор абстрактного класса вызывается **из подкласса** для
      инициализации общих полей и выполнения базовой логики.


      ## **Модификаторы конструктора в абстрактном классе**


      ### 1\. `protected` (часто используемый вариант)


      -  **Идеально для контроля доступа:** Конструктор доступен только для
      подклассов (внутри пакета или за его пределами, если они наследуются).


      -  **Пример использования:** Если абстрактный класс предназначен для
      наследования, но его логика не должна быть доступна для создания
      экземпляров в других местах напрямую.


      ### 2\. `public`


      -  Используется, если класс должен быть легко расширяем любыми другими
      классами (даже из других пакетов).


      -  Подходит для **базовых абстрактных классов**, которые могут быть
      использованы как часть библиотеки.


      ### 3\. **package-private** (по умолчанию, без модификатора)


      -  Конструктор будет доступен только классам внутри того же **пакета**.


      -  Уместно, если абстрактный класс и его наследники предполагаются для
      использования внутри пакета и не должны быть доступны извне.


      ### 4\. `private` (редко используется)


      -  **Возможен**, но используется очень редко.


      -  Применяется для **реализации шаблона проектирования Singleton или
      Factory**, когда создание экземпляров абстрактного класса ограничено самим
      классом.
  answers: []
U7Nkr:
  comment:
    user:
      mail: alexbbtsk@gmail.com
      name: ALhoc27
    dateTime: '2024-10-22T16:22:35.100Z'
    content: >-
      Модификатор - описание - применимост**ь**


      `public` - Неявно применяется ко всем методам - **Абстрактным**,
      **default**, **static**


      `default` - Позволяет задавать реализацию - Только для **нестатических
      методов**


      `static` - Статическая логика, привязанная кинтерфейсу - Не требует
      экземпляра


      `private` - Служебная логика для **default** и **static** - Невидим для
      классов
  answers: []
WtdPH:
  comment:
    user:
      mail: alexbbtsk@gmail.com
      name: ALhoc27
    dateTime: '2024-10-25T18:39:18.645Z'
    content: >-
      # Статические переменные класс**а**


      -  Объявляются с модификатором `static`.


      -  Принадлежат **классу в целом**, а не отдельному объекту.


      -  **Общие для всех объектов** -- если один объект изменит значение, это
      изменение будет видно всем.


      -  Доступ через **имя класса** или объект (но предпочтительно использовать
      имя класса).




      # Особенности и правила static переменных:


      1. **Инициализируются** при загрузке класса.


      2. **Общие для всех экземпляров класса.**


      3. **Доступны через имя класса** без создания объекта.


      4. **Не освобождаются до завершения программы**, если класс остается
      загруженным.
  answers: []
Rou5M:
  comment:
    user:
      mail: alexbbtsk@gmail.com
      name: ALhoc27
    dateTime: '2024-10-25T18:44:49.406Z'
    content: >-
      Внутри метода переменные


      Внутри метода переменные (**Локальная переменные**) - не имеет
      модификаторов доступа, потому что доступны только в пределах метода.


      Объявляются и используются **только внутри метода или блока**.
  answers: []
hIkBb:
  comment:
    user:
      mail: alexbbtsk@gmail.com
      name: ALhoc27
    dateTime: '2024-10-25T18:45:23.369Z'
    content: >-
      Член класса, поле класса


      1. Объявляются **внутри класса, но вне методов**.


      2. Уникальны для каждого объекта -- каждый экземпляр имеет свою копию
      переменной.


      3. Доступ через `this` для различения полей и параметров.
  answers: []
